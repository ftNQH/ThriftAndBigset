// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user_item

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TStringKey string

func TStringKeyPtr(v TStringKey) *TStringKey { return &v }

type TItemKey []byte

func TItemKeyPtr(v TItemKey) *TItemKey { return &v }

type ItemList []*TItem

func ItemListPtr(v ItemList) *ItemList { return &v }

type ItemListById []*TItem

func ItemListByIdPtr(v ItemListById) *ItemListById { return &v }

// Attributes:
//   - Category
//   - Collection
//   - Create
//   - Like
//   - Owner
//   - TotalOffer
type TExtendData struct {
	Category   string `thrift:"Category,1" db:"Category" json:"Category"`
	Collection string `thrift:"Collection,2" db:"Collection" json:"Collection"`
	Create     string `thrift:"Create,3" db:"Create" json:"Create"`
	Like       string `thrift:"Like,4" db:"Like" json:"Like"`
	Owner      string `thrift:"Owner,5" db:"Owner" json:"Owner"`
	TotalOffer string `thrift:"TotalOffer,6" db:"TotalOffer" json:"TotalOffer"`
}

func NewTExtendData() *TExtendData {
	return &TExtendData{}
}

func (p *TExtendData) GetCategory() string {
	return p.Category
}

func (p *TExtendData) GetCollection() string {
	return p.Collection
}

func (p *TExtendData) GetCreate() string {
	return p.Create
}

func (p *TExtendData) GetLike() string {
	return p.Like
}

func (p *TExtendData) GetOwner() string {
	return p.Owner
}

func (p *TExtendData) GetTotalOffer() string {
	return p.TotalOffer
}
func (p *TExtendData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TExtendData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Category = v
	}
	return nil
}

func (p *TExtendData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Collection = v
	}
	return nil
}

func (p *TExtendData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Create = v
	}
	return nil
}

func (p *TExtendData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Like = v
	}
	return nil
}

func (p *TExtendData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *TExtendData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalOffer = v
	}
	return nil
}

func (p *TExtendData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TExtendData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TExtendData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Category", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Category: ", p), err)
	}
	if err := oprot.WriteString(string(p.Category)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Category (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Category: ", p), err)
	}
	return err
}

func (p *TExtendData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Collection", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Collection: ", p), err)
	}
	if err := oprot.WriteString(string(p.Collection)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Collection (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Collection: ", p), err)
	}
	return err
}

func (p *TExtendData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Create", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Create: ", p), err)
	}
	if err := oprot.WriteString(string(p.Create)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Create (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Create: ", p), err)
	}
	return err
}

func (p *TExtendData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Like", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Like: ", p), err)
	}
	if err := oprot.WriteString(string(p.Like)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Like (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Like: ", p), err)
	}
	return err
}

func (p *TExtendData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Owner", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Owner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Owner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Owner (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Owner: ", p), err)
	}
	return err
}

func (p *TExtendData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalOffer", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TotalOffer: ", p), err)
	}
	if err := oprot.WriteString(string(p.TotalOffer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalOffer (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TotalOffer: ", p), err)
	}
	return err
}

func (p *TExtendData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TExtendData(%+v)", *p)
}

// Attributes:
//   - Name
//   - Symbol
//   - Address
//   - Chain
//   - Decimal
//   - Img
//   - Status
type TCurrencyAddress struct {
	Name    string `thrift:"Name,1" db:"Name" json:"Name"`
	Symbol  string `thrift:"Symbol,2" db:"Symbol" json:"Symbol"`
	Address string `thrift:"Address,3" db:"Address" json:"Address"`
	Chain   string `thrift:"Chain,4" db:"Chain" json:"Chain"`
	Decimal int16  `thrift:"Decimal,5" db:"Decimal" json:"Decimal"`
	// unused field # 6
	Img    string `thrift:"Img,7" db:"Img" json:"Img"`
	Status bool   `thrift:"Status,8" db:"Status" json:"Status"`
}

func NewTCurrencyAddress() *TCurrencyAddress {
	return &TCurrencyAddress{}
}

func (p *TCurrencyAddress) GetName() string {
	return p.Name
}

func (p *TCurrencyAddress) GetSymbol() string {
	return p.Symbol
}

func (p *TCurrencyAddress) GetAddress() string {
	return p.Address
}

func (p *TCurrencyAddress) GetChain() string {
	return p.Chain
}

func (p *TCurrencyAddress) GetDecimal() int16 {
	return p.Decimal
}

func (p *TCurrencyAddress) GetImg() string {
	return p.Img
}

func (p *TCurrencyAddress) GetStatus() bool {
	return p.Status
}
func (p *TCurrencyAddress) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCurrencyAddress) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Symbol = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Chain = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Decimal = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Img = v
	}
	return nil
}

func (p *TCurrencyAddress) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TCurrencyAddress) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCurrencyAddress"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCurrencyAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Name: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Symbol", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Symbol: ", p), err)
	}
	if err := oprot.WriteString(string(p.Symbol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Symbol (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Symbol: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Address: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Chain", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Chain: ", p), err)
	}
	if err := oprot.WriteString(string(p.Chain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Chain (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Chain: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Decimal", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Decimal: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Decimal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Decimal (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Decimal: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Img", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Img: ", p), err)
	}
	if err := oprot.WriteString(string(p.Img)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Img (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Img: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Status: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Status: ", p), err)
	}
	return err
}

func (p *TCurrencyAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCurrencyAddress(%+v)", *p)
}

// Attributes:
//   - UID
//   - Name
//   - Username
//   - Pubkey
//   - Bio
//   - Avatar
//   - Background
//   - Email
//   - Facebook
//   - Instagram
//   - Twitter
//   - Youtube
//   - CountryCode
//   - Language
//   - BlockchainAddress
//   - Vip
//   - TypeUser
//   - CanMint
//   - Verify
//   - IsPartner
//   - App
//   - TotalFollowing
//   - TotalFollers
//   - ExtendData
//   - Block
//   - Deleted
//   - CreateTime
//   - UpdateTime
type TUser struct {
	UID               int32        `thrift:"Uid,1,required" db:"Uid" json:"Uid"`
	Name              string       `thrift:"Name,2" db:"Name" json:"Name"`
	Username          string       `thrift:"Username,3" db:"Username" json:"Username"`
	Pubkey            string       `thrift:"Pubkey,4" db:"Pubkey" json:"Pubkey"`
	Bio               string       `thrift:"Bio,5" db:"Bio" json:"Bio"`
	Avatar            string       `thrift:"Avatar,6" db:"Avatar" json:"Avatar"`
	Background        string       `thrift:"Background,7" db:"Background" json:"Background"`
	Email             string       `thrift:"Email,8" db:"Email" json:"Email"`
	Facebook          string       `thrift:"Facebook,9" db:"Facebook" json:"Facebook"`
	Instagram         string       `thrift:"Instagram,10" db:"Instagram" json:"Instagram"`
	Twitter           string       `thrift:"Twitter,11" db:"Twitter" json:"Twitter"`
	Youtube           string       `thrift:"Youtube,12" db:"Youtube" json:"Youtube"`
	CountryCode       string       `thrift:"CountryCode,13" db:"CountryCode" json:"CountryCode"`
	Language          string       `thrift:"Language,14" db:"Language" json:"Language"`
	BlockchainAddress string       `thrift:"BlockchainAddress,15" db:"BlockchainAddress" json:"BlockchainAddress"`
	Vip               int16        `thrift:"Vip,16" db:"Vip" json:"Vip"`
	TypeUser          int16        `thrift:"TypeUser,17" db:"TypeUser" json:"TypeUser"`
	CanMint           bool         `thrift:"CanMint,18" db:"CanMint" json:"CanMint"`
	Verify            bool         `thrift:"Verify,19" db:"Verify" json:"Verify"`
	IsPartner         bool         `thrift:"IsPartner,20" db:"IsPartner" json:"IsPartner"`
	App               string       `thrift:"App,21" db:"App" json:"App"`
	TotalFollowing    int32        `thrift:"TotalFollowing,22" db:"TotalFollowing" json:"TotalFollowing"`
	TotalFollers      int32        `thrift:"TotalFollers,23" db:"TotalFollers" json:"TotalFollers"`
	ExtendData        *TExtendData `thrift:"ExtendData,24" db:"ExtendData" json:"ExtendData"`
	Block             bool         `thrift:"Block,25" db:"Block" json:"Block"`
	Deleted           bool         `thrift:"Deleted,26" db:"Deleted" json:"Deleted"`
	CreateTime        int16        `thrift:"CreateTime,27" db:"CreateTime" json:"CreateTime"`
	UpdateTime        int16        `thrift:"UpdateTime,28" db:"UpdateTime" json:"UpdateTime"`
}

func NewTUser() *TUser {
	return &TUser{}
}

func (p *TUser) GetUID() int32 {
	return p.UID
}

func (p *TUser) GetName() string {
	return p.Name
}

func (p *TUser) GetUsername() string {
	return p.Username
}

func (p *TUser) GetPubkey() string {
	return p.Pubkey
}

func (p *TUser) GetBio() string {
	return p.Bio
}

func (p *TUser) GetAvatar() string {
	return p.Avatar
}

func (p *TUser) GetBackground() string {
	return p.Background
}

func (p *TUser) GetEmail() string {
	return p.Email
}

func (p *TUser) GetFacebook() string {
	return p.Facebook
}

func (p *TUser) GetInstagram() string {
	return p.Instagram
}

func (p *TUser) GetTwitter() string {
	return p.Twitter
}

func (p *TUser) GetYoutube() string {
	return p.Youtube
}

func (p *TUser) GetCountryCode() string {
	return p.CountryCode
}

func (p *TUser) GetLanguage() string {
	return p.Language
}

func (p *TUser) GetBlockchainAddress() string {
	return p.BlockchainAddress
}

func (p *TUser) GetVip() int16 {
	return p.Vip
}

func (p *TUser) GetTypeUser() int16 {
	return p.TypeUser
}

func (p *TUser) GetCanMint() bool {
	return p.CanMint
}

func (p *TUser) GetVerify() bool {
	return p.Verify
}

func (p *TUser) GetIsPartner() bool {
	return p.IsPartner
}

func (p *TUser) GetApp() string {
	return p.App
}

func (p *TUser) GetTotalFollowing() int32 {
	return p.TotalFollowing
}

func (p *TUser) GetTotalFollers() int32 {
	return p.TotalFollers
}

var TUser_ExtendData_DEFAULT *TExtendData

func (p *TUser) GetExtendData() *TExtendData {
	if !p.IsSetExtendData() {
		return TUser_ExtendData_DEFAULT
	}
	return p.ExtendData
}

func (p *TUser) GetBlock() bool {
	return p.Block
}

func (p *TUser) GetDeleted() bool {
	return p.Deleted
}

func (p *TUser) GetCreateTime() int16 {
	return p.CreateTime
}

func (p *TUser) GetUpdateTime() int16 {
	return p.UpdateTime
}
func (p *TUser) IsSetExtendData() bool {
	return p.ExtendData != nil
}

func (p *TUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetUID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField27(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField28(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UID is not set"))
	}
	return nil
}

func (p *TUser) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *TUser) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TUser) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *TUser) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Pubkey = v
	}
	return nil
}

func (p *TUser) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Bio = v
	}
	return nil
}

func (p *TUser) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Avatar = v
	}
	return nil
}

func (p *TUser) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Background = v
	}
	return nil
}

func (p *TUser) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *TUser) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Facebook = v
	}
	return nil
}

func (p *TUser) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Instagram = v
	}
	return nil
}

func (p *TUser) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Twitter = v
	}
	return nil
}

func (p *TUser) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Youtube = v
	}
	return nil
}

func (p *TUser) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CountryCode = v
	}
	return nil
}

func (p *TUser) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *TUser) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.BlockchainAddress = v
	}
	return nil
}

func (p *TUser) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Vip = v
	}
	return nil
}

func (p *TUser) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TypeUser = v
	}
	return nil
}

func (p *TUser) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.CanMint = v
	}
	return nil
}

func (p *TUser) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Verify = v
	}
	return nil
}

func (p *TUser) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.IsPartner = v
	}
	return nil
}

func (p *TUser) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.App = v
	}
	return nil
}

func (p *TUser) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.TotalFollowing = v
	}
	return nil
}

func (p *TUser) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.TotalFollers = v
	}
	return nil
}

func (p *TUser) ReadField24(iprot thrift.TProtocol) error {
	p.ExtendData = &TExtendData{}
	if err := p.ExtendData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendData), err)
	}
	return nil
}

func (p *TUser) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.Block = v
	}
	return nil
}

func (p *TUser) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.Deleted = v
	}
	return nil
}

func (p *TUser) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *TUser) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Uid", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Uid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Uid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Uid: ", p), err)
	}
	return err
}

func (p *TUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
	}
	return err
}

func (p *TUser) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Username", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Username (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Username: ", p), err)
	}
	return err
}

func (p *TUser) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Pubkey", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Pubkey: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pubkey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Pubkey (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Pubkey: ", p), err)
	}
	return err
}

func (p *TUser) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Bio", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Bio: ", p), err)
	}
	if err := oprot.WriteString(string(p.Bio)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Bio (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Bio: ", p), err)
	}
	return err
}

func (p *TUser) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Avatar", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Avatar: ", p), err)
	}
	if err := oprot.WriteString(string(p.Avatar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Avatar (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Avatar: ", p), err)
	}
	return err
}

func (p *TUser) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Background", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Background: ", p), err)
	}
	if err := oprot.WriteString(string(p.Background)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Background (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Background: ", p), err)
	}
	return err
}

func (p *TUser) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Email", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Email (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Email: ", p), err)
	}
	return err
}

func (p *TUser) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Facebook", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Facebook: ", p), err)
	}
	if err := oprot.WriteString(string(p.Facebook)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Facebook (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Facebook: ", p), err)
	}
	return err
}

func (p *TUser) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Instagram", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Instagram: ", p), err)
	}
	if err := oprot.WriteString(string(p.Instagram)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Instagram (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Instagram: ", p), err)
	}
	return err
}

func (p *TUser) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Twitter", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Twitter: ", p), err)
	}
	if err := oprot.WriteString(string(p.Twitter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Twitter (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Twitter: ", p), err)
	}
	return err
}

func (p *TUser) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Youtube", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Youtube: ", p), err)
	}
	if err := oprot.WriteString(string(p.Youtube)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Youtube (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Youtube: ", p), err)
	}
	return err
}

func (p *TUser) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CountryCode", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:CountryCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.CountryCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CountryCode (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:CountryCode: ", p), err)
	}
	return err
}

func (p *TUser) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Language", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:Language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Language (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:Language: ", p), err)
	}
	return err
}

func (p *TUser) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BlockchainAddress", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:BlockchainAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.BlockchainAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BlockchainAddress (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:BlockchainAddress: ", p), err)
	}
	return err
}

func (p *TUser) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Vip", thrift.I16, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:Vip: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Vip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Vip (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:Vip: ", p), err)
	}
	return err
}

func (p *TUser) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TypeUser", thrift.I16, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:TypeUser: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TypeUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TypeUser (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:TypeUser: ", p), err)
	}
	return err
}

func (p *TUser) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CanMint", thrift.BOOL, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:CanMint: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanMint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CanMint (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:CanMint: ", p), err)
	}
	return err
}

func (p *TUser) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Verify", thrift.BOOL, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Verify: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Verify)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Verify (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Verify: ", p), err)
	}
	return err
}

func (p *TUser) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsPartner", thrift.BOOL, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:IsPartner: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsPartner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsPartner (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:IsPartner: ", p), err)
	}
	return err
}

func (p *TUser) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("App", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:App: ", p), err)
	}
	if err := oprot.WriteString(string(p.App)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.App (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:App: ", p), err)
	}
	return err
}

func (p *TUser) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalFollowing", thrift.I32, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:TotalFollowing: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalFollowing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalFollowing (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:TotalFollowing: ", p), err)
	}
	return err
}

func (p *TUser) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalFollers", thrift.I32, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:TotalFollers: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalFollers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalFollers (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:TotalFollers: ", p), err)
	}
	return err
}

func (p *TUser) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExtendData", thrift.STRUCT, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:ExtendData: ", p), err)
	}
	if err := p.ExtendData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:ExtendData: ", p), err)
	}
	return err
}

func (p *TUser) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Block", thrift.BOOL, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:Block: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Block)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Block (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:Block: ", p), err)
	}
	return err
}

func (p *TUser) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Deleted", thrift.BOOL, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:Deleted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Deleted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Deleted (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:Deleted: ", p), err)
	}
	return err
}

func (p *TUser) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I16, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:CreateTime: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:CreateTime: ", p), err)
	}
	return err
}

func (p *TUser) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I16, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:UpdateTime: ", p), err)
	}
	return err
}

func (p *TUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TUser(%+v)", *p)
}

// Attributes:
//   - ID
//   - ImageUrl
//   - URL
//   - Name
//   - Status
//   - CollectionId
//   - CreateTime
//   - UpdateTime
//   - ArrOwnerAddress
//   - ArrOwnerUid
//   - CreatorAddress
//   - OwnerAddress
//   - OwnerUID
//   - CreatorUid
//   - ExternalLink
//   - EventIds
//   - TotalView
//   - TotalLike
//   - Edition
//   - MetaData
//   - MediaType
//   - CategoryType
//   - ProductNo
//   - TotalEdition
//   - ExtendData
//   - IsSensitive
//   - Hidden
//   - Price
//   - TokenId
//   - ContractAddress
//   - Chain
//   - CurrencyAddress
//   - TypeNft
//   - TotalClaim
//   - TotalLimit
//   - StartAt
//   - EndAt
//   - UnlockableContent
//   - IsLootbox
type TItem struct {
	ID                int32             `thrift:"Id,1,required" db:"Id" json:"Id"`
	ImageUrl          string            `thrift:"ImageUrl,2" db:"ImageUrl" json:"ImageUrl"`
	URL               string            `thrift:"Url,3" db:"Url" json:"Url"`
	Name              string            `thrift:"Name,4" db:"Name" json:"Name"`
	Status            int16             `thrift:"Status,5" db:"Status" json:"Status"`
	CollectionId      int16             `thrift:"CollectionId,6" db:"CollectionId" json:"CollectionId"`
	CreateTime        int64             `thrift:"CreateTime,7" db:"CreateTime" json:"CreateTime"`
	UpdateTime        int64             `thrift:"UpdateTime,8" db:"UpdateTime" json:"UpdateTime"`
	ArrOwnerAddress   map[string]int16  `thrift:"ArrOwnerAddress,9" db:"ArrOwnerAddress" json:"ArrOwnerAddress"`
	ArrOwnerUid       map[string]int16  `thrift:"ArrOwnerUid,10" db:"ArrOwnerUid" json:"ArrOwnerUid"`
	CreatorAddress    string            `thrift:"CreatorAddress,11" db:"CreatorAddress" json:"CreatorAddress"`
	OwnerAddress      string            `thrift:"OwnerAddress,12" db:"OwnerAddress" json:"OwnerAddress"`
	OwnerUID          int16             `thrift:"OwnerUID,13" db:"OwnerUID" json:"OwnerUID"`
	CreatorUid        int16             `thrift:"CreatorUid,14" db:"CreatorUid" json:"CreatorUid"`
	ExternalLink      string            `thrift:"ExternalLink,15" db:"ExternalLink" json:"ExternalLink"`
	EventIds          []int16           `thrift:"EventIds,16" db:"EventIds" json:"EventIds"`
	TotalView         int16             `thrift:"TotalView,17" db:"TotalView" json:"TotalView"`
	TotalLike         int16             `thrift:"TotalLike,18" db:"TotalLike" json:"TotalLike"`
	Edition           int16             `thrift:"Edition,19" db:"Edition" json:"Edition"`
	MetaData          string            `thrift:"MetaData,20" db:"MetaData" json:"MetaData"`
	MediaType         string            `thrift:"MediaType,21" db:"MediaType" json:"MediaType"`
	CategoryType      int16             `thrift:"CategoryType,22" db:"CategoryType" json:"CategoryType"`
	ProductNo         string            `thrift:"ProductNo,23" db:"ProductNo" json:"ProductNo"`
	TotalEdition      int16             `thrift:"TotalEdition,24" db:"TotalEdition" json:"TotalEdition"`
	ExtendData        *TExtendData      `thrift:"ExtendData,25" db:"ExtendData" json:"ExtendData"`
	IsSensitive       bool              `thrift:"IsSensitive,26" db:"IsSensitive" json:"IsSensitive"`
	Hidden            bool              `thrift:"Hidden,27" db:"Hidden" json:"Hidden"`
	Price             string            `thrift:"Price,28" db:"Price" json:"Price"`
	TokenId           string            `thrift:"TokenId,29" db:"TokenId" json:"TokenId"`
	ContractAddress   string            `thrift:"ContractAddress,30" db:"ContractAddress" json:"ContractAddress"`
	Chain             string            `thrift:"Chain,31" db:"Chain" json:"Chain"`
	CurrencyAddress   *TCurrencyAddress `thrift:"CurrencyAddress,32" db:"CurrencyAddress" json:"CurrencyAddress"`
	TypeNft           int16             `thrift:"TypeNft,33" db:"TypeNft" json:"TypeNft"`
	TotalClaim        int32             `thrift:"TotalClaim,34" db:"TotalClaim" json:"TotalClaim"`
	TotalLimit        int32             `thrift:"TotalLimit,35" db:"TotalLimit" json:"TotalLimit"`
	StartAt           int16             `thrift:"StartAt,36" db:"StartAt" json:"StartAt"`
	EndAt             int16             `thrift:"EndAt,37" db:"EndAt" json:"EndAt"`
	UnlockableContent string            `thrift:"UnlockableContent,38" db:"UnlockableContent" json:"UnlockableContent"`
	IsLootbox         bool              `thrift:"IsLootbox,39" db:"IsLootbox" json:"IsLootbox"`
}

func NewTItem() *TItem {
	return &TItem{}
}

func (p *TItem) GetID() int32 {
	return p.ID
}

func (p *TItem) GetImageUrl() string {
	return p.ImageUrl
}

func (p *TItem) GetURL() string {
	return p.URL
}

func (p *TItem) GetName() string {
	return p.Name
}

func (p *TItem) GetStatus() int16 {
	return p.Status
}

func (p *TItem) GetCollectionId() int16 {
	return p.CollectionId
}

func (p *TItem) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *TItem) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *TItem) GetArrOwnerAddress() map[string]int16 {
	return p.ArrOwnerAddress
}

func (p *TItem) GetArrOwnerUid() map[string]int16 {
	return p.ArrOwnerUid
}

func (p *TItem) GetCreatorAddress() string {
	return p.CreatorAddress
}

func (p *TItem) GetOwnerAddress() string {
	return p.OwnerAddress
}

func (p *TItem) GetOwnerUID() int16 {
	return p.OwnerUID
}

func (p *TItem) GetCreatorUid() int16 {
	return p.CreatorUid
}

func (p *TItem) GetExternalLink() string {
	return p.ExternalLink
}

func (p *TItem) GetEventIds() []int16 {
	return p.EventIds
}

func (p *TItem) GetTotalView() int16 {
	return p.TotalView
}

func (p *TItem) GetTotalLike() int16 {
	return p.TotalLike
}

func (p *TItem) GetEdition() int16 {
	return p.Edition
}

func (p *TItem) GetMetaData() string {
	return p.MetaData
}

func (p *TItem) GetMediaType() string {
	return p.MediaType
}

func (p *TItem) GetCategoryType() int16 {
	return p.CategoryType
}

func (p *TItem) GetProductNo() string {
	return p.ProductNo
}

func (p *TItem) GetTotalEdition() int16 {
	return p.TotalEdition
}

var TItem_ExtendData_DEFAULT *TExtendData

func (p *TItem) GetExtendData() *TExtendData {
	if !p.IsSetExtendData() {
		return TItem_ExtendData_DEFAULT
	}
	return p.ExtendData
}

func (p *TItem) GetIsSensitive() bool {
	return p.IsSensitive
}

func (p *TItem) GetHidden() bool {
	return p.Hidden
}

func (p *TItem) GetPrice() string {
	return p.Price
}

func (p *TItem) GetTokenId() string {
	return p.TokenId
}

func (p *TItem) GetContractAddress() string {
	return p.ContractAddress
}

func (p *TItem) GetChain() string {
	return p.Chain
}

var TItem_CurrencyAddress_DEFAULT *TCurrencyAddress

func (p *TItem) GetCurrencyAddress() *TCurrencyAddress {
	if !p.IsSetCurrencyAddress() {
		return TItem_CurrencyAddress_DEFAULT
	}
	return p.CurrencyAddress
}

func (p *TItem) GetTypeNft() int16 {
	return p.TypeNft
}

func (p *TItem) GetTotalClaim() int32 {
	return p.TotalClaim
}

func (p *TItem) GetTotalLimit() int32 {
	return p.TotalLimit
}

func (p *TItem) GetStartAt() int16 {
	return p.StartAt
}

func (p *TItem) GetEndAt() int16 {
	return p.EndAt
}

func (p *TItem) GetUnlockableContent() string {
	return p.UnlockableContent
}

func (p *TItem) GetIsLootbox() bool {
	return p.IsLootbox
}
func (p *TItem) IsSetExtendData() bool {
	return p.ExtendData != nil
}

func (p *TItem) IsSetCurrencyAddress() bool {
	return p.CurrencyAddress != nil
}

func (p *TItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField27(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField28(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField29(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField33(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField34(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField35(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField36(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField37(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 38:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField38(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 39:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField39(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *TItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ImageUrl = v
	}
	return nil
}

func (p *TItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *TItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CollectionId = v
	}
	return nil
}

func (p *TItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *TItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *TItem) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int16, size)
	p.ArrOwnerAddress = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.ArrOwnerAddress[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TItem) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int16, size)
	p.ArrOwnerUid = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.ArrOwnerUid[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CreatorAddress = v
	}
	return nil
}

func (p *TItem) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.OwnerAddress = v
	}
	return nil
}

func (p *TItem) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.OwnerUID = v
	}
	return nil
}

func (p *TItem) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CreatorUid = v
	}
	return nil
}

func (p *TItem) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ExternalLink = v
	}
	return nil
}

func (p *TItem) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int16, 0, size)
	p.EventIds = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.EventIds = append(p.EventIds, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TItem) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TotalView = v
	}
	return nil
}

func (p *TItem) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.TotalLike = v
	}
	return nil
}

func (p *TItem) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Edition = v
	}
	return nil
}

func (p *TItem) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.MetaData = v
	}
	return nil
}

func (p *TItem) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.MediaType = v
	}
	return nil
}

func (p *TItem) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.CategoryType = v
	}
	return nil
}

func (p *TItem) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ProductNo = v
	}
	return nil
}

func (p *TItem) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.TotalEdition = v
	}
	return nil
}

func (p *TItem) ReadField25(iprot thrift.TProtocol) error {
	p.ExtendData = &TExtendData{}
	if err := p.ExtendData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendData), err)
	}
	return nil
}

func (p *TItem) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.IsSensitive = v
	}
	return nil
}

func (p *TItem) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.Hidden = v
	}
	return nil
}

func (p *TItem) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *TItem) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.TokenId = v
	}
	return nil
}

func (p *TItem) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ContractAddress = v
	}
	return nil
}

func (p *TItem) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.Chain = v
	}
	return nil
}

func (p *TItem) ReadField32(iprot thrift.TProtocol) error {
	p.CurrencyAddress = &TCurrencyAddress{}
	if err := p.CurrencyAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CurrencyAddress), err)
	}
	return nil
}

func (p *TItem) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.TypeNft = v
	}
	return nil
}

func (p *TItem) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.TotalClaim = v
	}
	return nil
}

func (p *TItem) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.TotalLimit = v
	}
	return nil
}

func (p *TItem) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.StartAt = v
	}
	return nil
}

func (p *TItem) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.EndAt = v
	}
	return nil
}

func (p *TItem) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.UnlockableContent = v
	}
	return nil
}

func (p *TItem) ReadField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.IsLootbox = v
	}
	return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
		if err := p.writeField29(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
		if err := p.writeField33(oprot); err != nil {
			return err
		}
		if err := p.writeField34(oprot); err != nil {
			return err
		}
		if err := p.writeField35(oprot); err != nil {
			return err
		}
		if err := p.writeField36(oprot); err != nil {
			return err
		}
		if err := p.writeField37(oprot); err != nil {
			return err
		}
		if err := p.writeField38(oprot); err != nil {
			return err
		}
		if err := p.writeField39(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err)
	}
	return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ImageUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ImageUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImageUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ImageUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ImageUrl: ", p), err)
	}
	return err
}

func (p *TItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Url", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Url (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Url: ", p), err)
	}
	return err
}

func (p *TItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Name: ", p), err)
	}
	return err
}

func (p *TItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Status: ", p), err)
	}
	return err
}

func (p *TItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CollectionId", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:CollectionId: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.CollectionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CollectionId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:CollectionId: ", p), err)
	}
	return err
}

func (p *TItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:CreateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreateTime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:CreateTime: ", p), err)
	}
	return err
}

func (p *TItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UpdateTime", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:UpdateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UpdateTime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:UpdateTime: ", p), err)
	}
	return err
}

func (p *TItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ArrOwnerAddress", thrift.MAP, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ArrOwnerAddress: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I16, len(p.ArrOwnerAddress)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ArrOwnerAddress {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ArrOwnerAddress: ", p), err)
	}
	return err
}

func (p *TItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ArrOwnerUid", thrift.MAP, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ArrOwnerUid: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I16, len(p.ArrOwnerUid)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ArrOwnerUid {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ArrOwnerUid: ", p), err)
	}
	return err
}

func (p *TItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreatorAddress", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:CreatorAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreatorAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreatorAddress (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:CreatorAddress: ", p), err)
	}
	return err
}

func (p *TItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OwnerAddress", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:OwnerAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.OwnerAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OwnerAddress (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:OwnerAddress: ", p), err)
	}
	return err
}

func (p *TItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OwnerUID", thrift.I16, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:OwnerUID: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.OwnerUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OwnerUID (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:OwnerUID: ", p), err)
	}
	return err
}

func (p *TItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CreatorUid", thrift.I16, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:CreatorUid: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.CreatorUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CreatorUid (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:CreatorUid: ", p), err)
	}
	return err
}

func (p *TItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExternalLink", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:ExternalLink: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExternalLink)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ExternalLink (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:ExternalLink: ", p), err)
	}
	return err
}

func (p *TItem) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EventIds", thrift.LIST, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:EventIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I16, len(p.EventIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EventIds {
		if err := oprot.WriteI16(int16(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:EventIds: ", p), err)
	}
	return err
}

func (p *TItem) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalView", thrift.I16, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:TotalView: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TotalView)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalView (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:TotalView: ", p), err)
	}
	return err
}

func (p *TItem) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalLike", thrift.I16, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:TotalLike: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TotalLike)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalLike (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:TotalLike: ", p), err)
	}
	return err
}

func (p *TItem) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Edition", thrift.I16, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:Edition: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Edition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Edition (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:Edition: ", p), err)
	}
	return err
}

func (p *TItem) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MetaData", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:MetaData: ", p), err)
	}
	if err := oprot.WriteString(string(p.MetaData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MetaData (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:MetaData: ", p), err)
	}
	return err
}

func (p *TItem) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MediaType", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:MediaType: ", p), err)
	}
	if err := oprot.WriteString(string(p.MediaType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.MediaType (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:MediaType: ", p), err)
	}
	return err
}

func (p *TItem) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CategoryType", thrift.I16, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:CategoryType: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.CategoryType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CategoryType (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:CategoryType: ", p), err)
	}
	return err
}

func (p *TItem) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ProductNo", thrift.STRING, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:ProductNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProductNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ProductNo (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:ProductNo: ", p), err)
	}
	return err
}

func (p *TItem) writeField24(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalEdition", thrift.I16, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:TotalEdition: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TotalEdition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalEdition (24) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:TotalEdition: ", p), err)
	}
	return err
}

func (p *TItem) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ExtendData", thrift.STRUCT, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:ExtendData: ", p), err)
	}
	if err := p.ExtendData.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendData), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:ExtendData: ", p), err)
	}
	return err
}

func (p *TItem) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsSensitive", thrift.BOOL, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:IsSensitive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsSensitive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsSensitive (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:IsSensitive: ", p), err)
	}
	return err
}

func (p *TItem) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Hidden", thrift.BOOL, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:Hidden: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Hidden)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Hidden (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:Hidden: ", p), err)
	}
	return err
}

func (p *TItem) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Price", thrift.STRING, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:Price: ", p), err)
	}
	if err := oprot.WriteString(string(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Price (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:Price: ", p), err)
	}
	return err
}

func (p *TItem) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TokenId", thrift.STRING, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:TokenId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TokenId (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:TokenId: ", p), err)
	}
	return err
}

func (p *TItem) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ContractAddress", thrift.STRING, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:ContractAddress: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContractAddress)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ContractAddress (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:ContractAddress: ", p), err)
	}
	return err
}

func (p *TItem) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Chain", thrift.STRING, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:Chain: ", p), err)
	}
	if err := oprot.WriteString(string(p.Chain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Chain (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:Chain: ", p), err)
	}
	return err
}

func (p *TItem) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CurrencyAddress", thrift.STRUCT, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:CurrencyAddress: ", p), err)
	}
	if err := p.CurrencyAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CurrencyAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:CurrencyAddress: ", p), err)
	}
	return err
}

func (p *TItem) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TypeNft", thrift.I16, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:TypeNft: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TypeNft)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TypeNft (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:TypeNft: ", p), err)
	}
	return err
}

func (p *TItem) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalClaim", thrift.I32, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:TotalClaim: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalClaim)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalClaim (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:TotalClaim: ", p), err)
	}
	return err
}

func (p *TItem) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("TotalLimit", thrift.I32, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:TotalLimit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.TotalLimit (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:TotalLimit: ", p), err)
	}
	return err
}

func (p *TItem) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StartAt", thrift.I16, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:StartAt: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.StartAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StartAt (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:StartAt: ", p), err)
	}
	return err
}

func (p *TItem) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EndAt", thrift.I16, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:EndAt: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.EndAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.EndAt (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:EndAt: ", p), err)
	}
	return err
}

func (p *TItem) writeField38(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UnlockableContent", thrift.STRING, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:UnlockableContent: ", p), err)
	}
	if err := oprot.WriteString(string(p.UnlockableContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.UnlockableContent (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:UnlockableContent: ", p), err)
	}
	return err
}

func (p *TItem) writeField39(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IsLootbox", thrift.BOOL, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:IsLootbox: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsLootbox)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.IsLootbox (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:IsLootbox: ", p), err)
	}
	return err
}

func (p *TItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//   - Message
type ItemUnavailable struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewItemUnavailable() *ItemUnavailable {
	return &ItemUnavailable{}
}

func (p *ItemUnavailable) GetMessage() string {
	return p.Message
}
func (p *ItemUnavailable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemUnavailable) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ItemUnavailable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ItemUnavailable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemUnavailable) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *ItemUnavailable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemUnavailable(%+v)", *p)
}

func (p *ItemUnavailable) Error() string {
	return p.String()
}

type Item interface {
	// Parameters:
	//  - Pos
	//  - Count
	GetItem(ctx context.Context, pos int16, count int16) (r ItemList, err error)
	// Parameters:
	//  - ID
	DeleteItem(ctx context.Context, id int16) (r *TItem, err error)
	// Parameters:
	//  - ID
	//  - Item
	AddItem(ctx context.Context, id int16, item *TItem) (r *TItem, err error)
	// Parameters:
	//  - ID
	//  - Item
	EditItems(ctx context.Context, id int16, item *TItem) (r *TItem, err error)
	// Parameters:
	//  - User
	AddUser(ctx context.Context, user *TUser) (r *TUser, err error)
	// Parameters:
	//  - ID
	GetItemByUID(ctx context.Context, id int16) (r ItemListById, err error)
}

type ItemClient struct {
	c thrift.TClient
}

func NewItemClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ItemClient {
	return &ItemClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewItemClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ItemClient {
	return &ItemClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewItemClient(c thrift.TClient) *ItemClient {
	return &ItemClient{
		c: c,
	}
}

func (p *ItemClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//   - Pos
//   - Count
func (p *ItemClient) GetItem(ctx context.Context, pos int16, count int16) (r ItemList, err error) {
	var _args5 ItemGetItemArgs
	_args5.Pos = pos
	_args5.Count = count
	var _result6 ItemGetItemResult
	if err = p.Client_().Call(ctx, "getItem", &_args5, &_result6); err != nil {
		return
	}
	return _result6.GetSuccess(), nil
}

// Parameters:
//   - ID
func (p *ItemClient) DeleteItem(ctx context.Context, id int16) (r *TItem, err error) {
	var _args7 ItemDeleteItemArgs
	_args7.ID = id
	var _result8 ItemDeleteItemResult
	if err = p.Client_().Call(ctx, "deleteItem", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

// Parameters:
//   - ID
//   - Item
func (p *ItemClient) AddItem(ctx context.Context, id int16, item *TItem) (r *TItem, err error) {
	var _args9 ItemAddItemArgs
	_args9.ID = id
	_args9.Item = item
	var _result10 ItemAddItemResult
	if err = p.Client_().Call(ctx, "addItem", &_args9, &_result10); err != nil {
		return
	}
	return _result10.GetSuccess(), nil
}

// Parameters:
//   - ID
//   - Item
func (p *ItemClient) EditItems(ctx context.Context, id int16, item *TItem) (r *TItem, err error) {
	var _args11 ItemEditItemsArgs
	_args11.ID = id
	_args11.Item = item
	var _result12 ItemEditItemsResult
	if err = p.Client_().Call(ctx, "editItems", &_args11, &_result12); err != nil {
		return
	}
	return _result12.GetSuccess(), nil
}

// Parameters:
//   - User
func (p *ItemClient) AddUser(ctx context.Context, user *TUser) (r *TUser, err error) {
	var _args13 ItemAddUserArgs
	_args13.User = user
	var _result14 ItemAddUserResult
	if err = p.Client_().Call(ctx, "addUser", &_args13, &_result14); err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

// Parameters:
//   - ID
func (p *ItemClient) GetItemByUID(ctx context.Context, id int16) (r ItemListById, err error) {
	var _args15 ItemGetItemByUIDArgs
	_args15.ID = id
	var _result16 ItemGetItemByUIDResult
	if err = p.Client_().Call(ctx, "getItemByUID", &_args15, &_result16); err != nil {
		return
	}
	return _result16.GetSuccess(), nil
}

type ItemProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Item
}

func (p *ItemProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ItemProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ItemProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewItemProcessor(handler Item) *ItemProcessor {

	self17 := &ItemProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self17.processorMap["getItem"] = &itemProcessorGetItem{handler: handler}
	self17.processorMap["deleteItem"] = &itemProcessorDeleteItem{handler: handler}
	self17.processorMap["addItem"] = &itemProcessorAddItem{handler: handler}
	self17.processorMap["editItems"] = &itemProcessorEditItems{handler: handler}
	self17.processorMap["addUser"] = &itemProcessorAddUser{handler: handler}
	self17.processorMap["getItemByUID"] = &itemProcessorGetItemByUID{handler: handler}
	return self17
}

func (p *ItemProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x18.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x18

}

type itemProcessorGetItem struct {
	handler Item
}

func (p *itemProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemGetItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemGetItemResult{}
	var retval ItemList
	var err2 error
	if retval, err2 = p.handler.GetItem(ctx, args.Pos, args.Count); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: "+err2.Error())
		oprot.WriteMessageBegin("getItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itemProcessorDeleteItem struct {
	handler Item
}

func (p *itemProcessorDeleteItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemDeleteItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemDeleteItemResult{}
	var retval *TItem
	var err2 error
	if retval, err2 = p.handler.DeleteItem(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteItem: "+err2.Error())
		oprot.WriteMessageBegin("deleteItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itemProcessorAddItem struct {
	handler Item
}

func (p *itemProcessorAddItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemAddItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemAddItemResult{}
	var retval *TItem
	var err2 error
	if retval, err2 = p.handler.AddItem(ctx, args.ID, args.Item); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addItem: "+err2.Error())
		oprot.WriteMessageBegin("addItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itemProcessorEditItems struct {
	handler Item
}

func (p *itemProcessorEditItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemEditItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("editItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemEditItemsResult{}
	var retval *TItem
	var err2 error
	if retval, err2 = p.handler.EditItems(ctx, args.ID, args.Item); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing editItems: "+err2.Error())
		oprot.WriteMessageBegin("editItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("editItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itemProcessorAddUser struct {
	handler Item
}

func (p *itemProcessorAddUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemAddUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemAddUserResult{}
	var retval *TUser
	var err2 error
	if retval, err2 = p.handler.AddUser(ctx, args.User); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUser: "+err2.Error())
		oprot.WriteMessageBegin("addUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type itemProcessorGetItemByUID struct {
	handler Item
}

func (p *itemProcessorGetItemByUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ItemGetItemByUIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getItemByUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ItemGetItemByUIDResult{}
	var retval ItemListById
	var err2 error
	if retval, err2 = p.handler.GetItemByUID(ctx, args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemByUID: "+err2.Error())
		oprot.WriteMessageBegin("getItemByUID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getItemByUID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Pos
//   - Count
type ItemGetItemArgs struct {
	Pos   int16 `thrift:"pos,1" db:"pos" json:"pos"`
	Count int16 `thrift:"count,2" db:"count" json:"count"`
}

func NewItemGetItemArgs() *ItemGetItemArgs {
	return &ItemGetItemArgs{}
}

func (p *ItemGetItemArgs) GetPos() int16 {
	return p.Pos
}

func (p *ItemGetItemArgs) GetCount() int16 {
	return p.Count
}
func (p *ItemGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemGetItemArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Pos = v
	}
	return nil
}

func (p *ItemGetItemArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *ItemGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemGetItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pos", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pos: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Pos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pos (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pos: ", p), err)
	}
	return err
}

func (p *ItemGetItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *ItemGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemGetItemArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemGetItemResult struct {
	Success ItemList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemGetItemResult() *ItemGetItemResult {
	return &ItemGetItemResult{}
}

var ItemGetItemResult_Success_DEFAULT ItemList

func (p *ItemGetItemResult) GetSuccess() ItemList {
	return p.Success
}
func (p *ItemGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemGetItemResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(ItemList, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &TItem{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Success = append(p.Success, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemGetItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemGetItemResult(%+v)", *p)
}

// Attributes:
//   - ID
type ItemDeleteItemArgs struct {
	ID int16 `thrift:"id,1" db:"id" json:"id"`
}

func NewItemDeleteItemArgs() *ItemDeleteItemArgs {
	return &ItemDeleteItemArgs{}
}

func (p *ItemDeleteItemArgs) GetID() int16 {
	return p.ID
}
func (p *ItemDeleteItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemDeleteItemArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ItemDeleteItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemDeleteItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ItemDeleteItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemDeleteItemArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemDeleteItemResult struct {
	Success *TItem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemDeleteItemResult() *ItemDeleteItemResult {
	return &ItemDeleteItemResult{}
}

var ItemDeleteItemResult_Success_DEFAULT *TItem

func (p *ItemDeleteItemResult) GetSuccess() *TItem {
	if !p.IsSetSuccess() {
		return ItemDeleteItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItemDeleteItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemDeleteItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemDeleteItemResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TItem{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ItemDeleteItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemDeleteItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemDeleteItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemDeleteItemResult(%+v)", *p)
}

// Attributes:
//   - ID
//   - Item
type ItemAddItemArgs struct {
	ID   int16  `thrift:"id,1" db:"id" json:"id"`
	Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewItemAddItemArgs() *ItemAddItemArgs {
	return &ItemAddItemArgs{}
}

func (p *ItemAddItemArgs) GetID() int16 {
	return p.ID
}

var ItemAddItemArgs_Item_DEFAULT *TItem

func (p *ItemAddItemArgs) GetItem() *TItem {
	if !p.IsSetItem() {
		return ItemAddItemArgs_Item_DEFAULT
	}
	return p.Item
}
func (p *ItemAddItemArgs) IsSetItem() bool {
	return p.Item != nil
}

func (p *ItemAddItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemAddItemArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ItemAddItemArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *ItemAddItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemAddItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ItemAddItemArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
	}
	return err
}

func (p *ItemAddItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemAddItemArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemAddItemResult struct {
	Success *TItem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemAddItemResult() *ItemAddItemResult {
	return &ItemAddItemResult{}
}

var ItemAddItemResult_Success_DEFAULT *TItem

func (p *ItemAddItemResult) GetSuccess() *TItem {
	if !p.IsSetSuccess() {
		return ItemAddItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItemAddItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemAddItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemAddItemResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TItem{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ItemAddItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemAddItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemAddItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemAddItemResult(%+v)", *p)
}

// Attributes:
//   - ID
//   - Item
type ItemEditItemsArgs struct {
	ID   int16  `thrift:"id,1" db:"id" json:"id"`
	Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewItemEditItemsArgs() *ItemEditItemsArgs {
	return &ItemEditItemsArgs{}
}

func (p *ItemEditItemsArgs) GetID() int16 {
	return p.ID
}

var ItemEditItemsArgs_Item_DEFAULT *TItem

func (p *ItemEditItemsArgs) GetItem() *TItem {
	if !p.IsSetItem() {
		return ItemEditItemsArgs_Item_DEFAULT
	}
	return p.Item
}
func (p *ItemEditItemsArgs) IsSetItem() bool {
	return p.Item != nil
}

func (p *ItemEditItemsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemEditItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ItemEditItemsArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Item = &TItem{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *ItemEditItemsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("editItems_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemEditItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ItemEditItemsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err)
	}
	return err
}

func (p *ItemEditItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemEditItemsArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemEditItemsResult struct {
	Success *TItem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemEditItemsResult() *ItemEditItemsResult {
	return &ItemEditItemsResult{}
}

var ItemEditItemsResult_Success_DEFAULT *TItem

func (p *ItemEditItemsResult) GetSuccess() *TItem {
	if !p.IsSetSuccess() {
		return ItemEditItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItemEditItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemEditItemsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemEditItemsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TItem{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ItemEditItemsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("editItems_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemEditItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemEditItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemEditItemsResult(%+v)", *p)
}

// Attributes:
//   - User
type ItemAddUserArgs struct {
	User *TUser `thrift:"user,1" db:"user" json:"user"`
}

func NewItemAddUserArgs() *ItemAddUserArgs {
	return &ItemAddUserArgs{}
}

var ItemAddUserArgs_User_DEFAULT *TUser

func (p *ItemAddUserArgs) GetUser() *TUser {
	if !p.IsSetUser() {
		return ItemAddUserArgs_User_DEFAULT
	}
	return p.User
}
func (p *ItemAddUserArgs) IsSetUser() bool {
	return p.User != nil
}

func (p *ItemAddUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemAddUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.User = &TUser{}
	if err := p.User.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
	}
	return nil
}

func (p *ItemAddUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemAddUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := p.User.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *ItemAddUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemAddUserArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemAddUserResult struct {
	Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemAddUserResult() *ItemAddUserResult {
	return &ItemAddUserResult{}
}

var ItemAddUserResult_Success_DEFAULT *TUser

func (p *ItemAddUserResult) GetSuccess() *TUser {
	if !p.IsSetSuccess() {
		return ItemAddUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItemAddUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemAddUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemAddUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TUser{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ItemAddUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemAddUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemAddUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemAddUserResult(%+v)", *p)
}

// Attributes:
//   - ID
type ItemGetItemByUIDArgs struct {
	ID int16 `thrift:"id,1" db:"id" json:"id"`
}

func NewItemGetItemByUIDArgs() *ItemGetItemByUIDArgs {
	return &ItemGetItemByUIDArgs{}
}

func (p *ItemGetItemByUIDArgs) GetID() int16 {
	return p.ID
}
func (p *ItemGetItemByUIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemGetItemByUIDArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ItemGetItemByUIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItemByUID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemGetItemByUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ItemGetItemByUIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemGetItemByUIDArgs(%+v)", *p)
}

// Attributes:
//   - Success
type ItemGetItemByUIDResult struct {
	Success ItemListById `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewItemGetItemByUIDResult() *ItemGetItemByUIDResult {
	return &ItemGetItemByUIDResult{}
}

var ItemGetItemByUIDResult_Success_DEFAULT ItemListById

func (p *ItemGetItemByUIDResult) GetSuccess() ItemListById {
	return p.Success
}
func (p *ItemGetItemByUIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemGetItemByUIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ItemGetItemByUIDResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make(ItemListById, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem20 := &TItem{}
		if err := _elem20.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
		}
		p.Success = append(p.Success, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ItemGetItemByUIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItemByUID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ItemGetItemByUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ItemGetItemByUIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemGetItemByUIDResult(%+v)", *p)
}
